// <auto-generated />
using System;
using DataAccess.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200729123351_initialize")]
    partial class initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.DocumentType.AttributeTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.ToTable("AttributeTypes","DocumentType");
                });

            modelBuilder.Entity("Entities.DocumentType.Attributes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowNull")
                        .HasColumnType("bit");

                    b.Property<long>("DocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId")
                        .HasName("IX_FK_DocumentTypeAttribute");

                    b.ToTable("Attributes","DocumentType");
                });

            modelBuilder.Entity("Entities.DocumentType.DocEvents", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DocumentId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .HasName("IX_FK_DocumentEvent");

                    b.HasIndex("UserId")
                        .HasName("IX_FK_EventUser");

                    b.ToTable("DocEvents","DocumentType");
                });

            modelBuilder.Entity("Entities.DocumentType.DocumentTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsInterface")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("OwnerDataType")
                        .HasColumnType("bit");

                    b.Property<int>("ScopeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScopeId")
                        .HasName("IX_FK_ScopeDocumentType");

                    b.ToTable("DocumentTypes","DocumentType");
                });

            modelBuilder.Entity("Entities.DocumentType.Documents", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowChange")
                        .HasColumnType("bit");

                    b.Property<string>("DataAsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FullInquiryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(21)")
                        .HasMaxLength(21);

                    b.Property<string>("ImageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long>("InquiryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NextVersion")
                        .HasColumnType("nvarchar(21)")
                        .HasMaxLength(21);

                    b.Property<string>("PrevVersion")
                        .HasColumnType("nvarchar(21)")
                        .HasMaxLength(21);

                    b.Property<string>("RegistrationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId")
                        .HasName("IX_FK_DocumentTypeDocument");

                    b.ToTable("Documents","DocumentType");
                });

            modelBuilder.Entity("Entities.DocumentType.DomainScope", b =>
                {
                    b.Property<int>("DomainsId")
                        .HasColumnName("Domains_Id")
                        .HasColumnType("int");

                    b.Property<int>("ScopesId")
                        .HasColumnName("Scopes_Id")
                        .HasColumnType("int");

                    b.HasKey("DomainsId", "ScopesId");

                    b.HasIndex("ScopesId")
                        .HasName("IX_FK_DomainScope_Scope");

                    b.ToTable("DomainScope","DocumentType");
                });

            modelBuilder.Entity("Entities.DocumentType.Domains", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Domains","DocumentType");
                });

            modelBuilder.Entity("Entities.DocumentType.HasA1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChildDocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<long>("ParrentDocumentTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChildDocumentTypeId")
                        .HasName("IX_FK_DocumentTypeHasA12");

                    b.HasIndex("ParrentDocumentTypeId")
                        .HasName("IX_FK_DocumentTypeHasA11");

                    b.ToTable("HasA1","DocumentType");
                });

            modelBuilder.Entity("Entities.DocumentType.HasAns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChildDocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxParticipation")
                        .HasColumnType("int");

                    b.Property<int>("MinParticipation")
                        .HasColumnType("int");

                    b.Property<long>("ParentDocumentTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChildDocumentTypeId")
                        .HasName("IX_FK_DocumentTypeHasA1");

                    b.HasIndex("ParentDocumentTypeId")
                        .HasName("IX_FK_DocumentTypeHasA");

                    b.ToTable("HasANs","DocumentType");
                });

            modelBuilder.Entity("Entities.DocumentType.IsAs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("SubDocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubDocumentTypeId1")
                        .HasColumnName("SubDocumentType_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("SuperDocumentTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubDocumentTypeId1")
                        .HasName("IX_FK_DocumentTypeIsA");

                    b.HasIndex("SuperDocumentTypeId")
                        .HasName("IX_FK_DocumentTypeIsA1");

                    b.ToTable("IsAs","DocumentType");
                });

            modelBuilder.Entity("Entities.DocumentType.PolicyOnChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.ToTable("PolicyOnChange","DocumentType");
                });

            modelBuilder.Entity("Entities.DocumentType.RelatedToes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCausal")
                        .HasColumnType("bit");

                    b.Property<long>("LeftDocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("LeftSideAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxParticipation")
                        .HasColumnType("int");

                    b.Property<int>("MinParticipation")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PolicyOnChangeId")
                        .HasColumnType("int");

                    b.Property<long>("RightDocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("RightSideAttributes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeftDocumentTypeId")
                        .HasName("IX_FK_DocumentTypeRelatedTo1");

                    b.HasIndex("RightDocumentTypeId")
                        .HasName("IX_FK_DocumentTypeRelatedTo");

                    b.ToTable("RelatedToes","DocumentType");
                });

            modelBuilder.Entity("Entities.DocumentType.Scopes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Scopes","DocumentType");
                });

            modelBuilder.Entity("Entities.DocumentType.Attributes", b =>
                {
                    b.HasOne("Entities.DocumentType.DocumentTypes", "DocumentType")
                        .WithMany("Attributes")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_DocumentTypeAttribute")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.DocumentType.DocEvents", b =>
                {
                    b.HasOne("Entities.DocumentType.Documents", "Document")
                        .WithMany("DocEvents")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_DocumentEvent")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.DocumentType.DocumentTypes", b =>
                {
                    b.HasOne("Entities.DocumentType.Scopes", "Scope")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("ScopeId")
                        .HasConstraintName("FK_ScopeDocumentType")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.DocumentType.Documents", b =>
                {
                    b.HasOne("Entities.DocumentType.DocumentTypes", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .HasConstraintName("FK_DocumentTypeDocument")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.DocumentType.DomainScope", b =>
                {
                    b.HasOne("Entities.DocumentType.Domains", "Domains")
                        .WithMany("DomainScope")
                        .HasForeignKey("DomainsId")
                        .HasConstraintName("FK_DomainScope_Domain")
                        .IsRequired();

                    b.HasOne("Entities.DocumentType.Scopes", "Scopes")
                        .WithMany("DomainScope")
                        .HasForeignKey("ScopesId")
                        .HasConstraintName("FK_DomainScope_Scope")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.DocumentType.HasA1", b =>
                {
                    b.HasOne("Entities.DocumentType.DocumentTypes", "ChildDocumentType")
                        .WithMany("HasA1ChildDocumentType")
                        .HasForeignKey("ChildDocumentTypeId")
                        .HasConstraintName("FK_DocumentTypeHasA12")
                        .IsRequired();

                    b.HasOne("Entities.DocumentType.DocumentTypes", "ParrentDocumentType")
                        .WithMany("HasA1ParrentDocumentType")
                        .HasForeignKey("ParrentDocumentTypeId")
                        .HasConstraintName("FK_DocumentTypeHasA11")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.DocumentType.HasAns", b =>
                {
                    b.HasOne("Entities.DocumentType.DocumentTypes", "ChildDocumentType")
                        .WithMany("HasAnsChildDocumentType")
                        .HasForeignKey("ChildDocumentTypeId")
                        .HasConstraintName("FK_DocumentTypeHasA1")
                        .IsRequired();

                    b.HasOne("Entities.DocumentType.DocumentTypes", "ParentDocumentType")
                        .WithMany("HasAnsParentDocumentType")
                        .HasForeignKey("ParentDocumentTypeId")
                        .HasConstraintName("FK_DocumentTypeHasA")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.DocumentType.IsAs", b =>
                {
                    b.HasOne("Entities.DocumentType.DocumentTypes", "SubDocumentTypeId1Navigation")
                        .WithMany("IsAsSubDocumentTypeId1Navigation")
                        .HasForeignKey("SubDocumentTypeId1")
                        .HasConstraintName("FK_DocumentTypeIsA")
                        .IsRequired();

                    b.HasOne("Entities.DocumentType.DocumentTypes", "SuperDocumentType")
                        .WithMany("IsAsSuperDocumentType")
                        .HasForeignKey("SuperDocumentTypeId")
                        .HasConstraintName("FK_DocumentTypeIsA1")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.DocumentType.RelatedToes", b =>
                {
                    b.HasOne("Entities.DocumentType.DocumentTypes", "LeftDocumentType")
                        .WithMany("RelatedToesLeftDocumentType")
                        .HasForeignKey("LeftDocumentTypeId")
                        .HasConstraintName("FK_DocumentTypeRelatedTo1")
                        .IsRequired();

                    b.HasOne("Entities.DocumentType.DocumentTypes", "RightDocumentType")
                        .WithMany("RelatedToesRightDocumentType")
                        .HasForeignKey("RightDocumentTypeId")
                        .HasConstraintName("FK_DocumentTypeRelatedTo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
